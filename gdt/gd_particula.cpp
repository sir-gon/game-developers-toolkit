// Class automatically generated by Dev-C++ New Class wizard

#include "gd_particula.h" // class's header file

// class constructor
GD_Particula::GD_Particula()
{
	// insert your code here
}

// class destructor
GD_Particula::~GD_Particula()
{
	// insert your code here
}


void GD_Particula::Crear(float x, float y, float z, float dx, float dy, float dz, int minparsec, int maxparsec, int tiempodevidamin, int tiempodevidamax, int maxang, char* filename)
{
//7,1,7
//x,y,z -> caja
//0.0,0.06,0.0
//dx,dy,dz -> direccion
//80
//minparsec -> numero minimo de particulas por segundo
//100
//maxparsec ->  numero maximo de particulas por segundo
//800
//tiempodevidamin
//2000
//tiempodevidamax  
//0
//maxang  

    RegistrarDevice(GD_Sistema::device);
    
    ISceneManager* mismgr=GD_Sistema::device->getSceneManager();
    IVideoDriver* driver = GD_Sistema::device->getVideoDriver();
    

	nodpt = mismgr->addParticleSystemSceneNode(false);
	
	   if(!nodpt) printf("ERROR: No se pudo Crear Sistema De Particulas.\n"); 
//	nodpt->setPosition(core::vector3df(-70,60,40));
//	nodpt->setScale(core::vector3df(2,2,2));

	nodpt->setParticleSize(core::dimension2d<f32>(20.0f, 20.0f));
 
	scene::IParticleEmitter* em = nodpt->createBoxEmitter(
		core::aabbox3d<f32>(-x,0,-z,x,y,z), 
		core::vector3df(dx,dy,dz),
		minparsec,maxparsec, 
		video::SColor(0,255,255,255), video::SColor(0,255,255,255),
		tiempodevidamin,tiempodevidamax,maxang);

	nodpt->setEmitter(em);
	em->drop();

	scene::IParticleAffector* paf = 
		nodpt->createFadeOutParticleAffector();

	nodpt->addAffector(paf);
	paf->drop();

	nodpt->setMaterialFlag(video::EMF_LIGHTING, false);
	nodpt->setMaterialTexture(0, driver->getTexture(filename));
	nodpt->setMaterialType(video::EMT_TRANSPARENT_VERTEX_ALPHA);
	
    nodon = nodpt;
    
}


void GD_Particula::Escalar(float x,float y)
{
 nodpt->setParticleSize(core::dimension2d<f32>(x, y));
}


void GD_Particula::CrearColision( GD_Escenario scen,float radiox, float radioy,float radioz,float transx,float transy,float transz,float grax,float gray, float graz)
{

    ITriangleSelector* selector = scen.RetornarDatos();

    ISceneManager* mismgr=midevice->getSceneManager();

	scene::ISceneNodeAnimator* anim = mismgr->createCollisionResponseAnimator(
		selector, nodon, core::vector3df(radiox,radioy,radioz),
		core::vector3df(transx,transy,transz),
		core::vector3df(grax,gray,graz));
	nodon->addAnimator(anim);
	//anim->drop();
}
